Estrutura Geral do Código

    Inclusão de Bibliotecas:
        O código começa incluindo várias bibliotecas necessárias para o funcionamento:
            WiFi.h: Para conectar o ESP32 à rede Wi-Fi.
            HTTPClient.h: Para fazer requisições HTTP.
            FirebaseESP32.h: Para interagir com o Firebase.
            ArduinoJson.h: Para trabalhar com dados JSON.
            DHT.h: Para interagir com o sensor DHT11 (que mede temperatura e umidade).
            Adafruit_BMP280.h: Para interagir com o sensor BMP280 (que mede pressão).

    Definição de Variáveis e Constantes:
        As credenciais da rede Wi-Fi e do Firebase são definidas.
        As constantes para a API do OpenWeatherMap são definidas, incluindo a chave da API e a URL para as requisições.
        Os pinos dos sensores são definidos.

    Instanciando Sensores:
        Instâncias dos sensores DHT e BMP280 são criadas. O sensor DHT11 é usado para medir temperatura e umidade, enquanto o BMP280 é usado para medir a pressão.

    Configuração no setup():
        O método setup() é executado uma vez quando o dispositivo é iniciado:
            Inicializa a comunicação serial.
            Inicia os sensores.
            Conecta o ESP32 à rede Wi-Fi.
            Configura o Firebase.

    Laço Principal no loop():
        O método loop() é executado continuamente:
            Lê os dados do DHT11 e do LDR (um sensor de luminosidade).
            Lê a pressão do BMP280.
            Verifica se as leituras dos sensores são válidas.
            Exibe os dados no console serial.
            Se estiver conectado ao Wi-Fi, faz uma requisição à API do OpenWeatherMap e envia os dados para o Firebase, além de verificar as condições de chuva.

    Função fetchWeatherData():
        Faz uma requisição GET à API do OpenWeatherMap e obtém dados em formato JSON.
        Extrai a temperatura, pressão e chance de chuva da resposta JSON.
        Exibe as informações recebidas no console serial.

    Função sendDataToFirebase():
        Cria um objeto JSON com os dados coletados (temperatura, umidade, pressão, etc.).
        Envia esses dados para o Firebase na rota /sensores.
        Imprime no console se os dados foram enviados com sucesso ou se houve erro.

    Função checkRainCondition():
        Verifica se as condições de pressão e a probabilidade de chuva indicam a possibilidade de chuvas.
        Se a pressão estiver abaixo de um determinado limite e houver chance de chuva, imprime um alerta no console.

Resumo da Funcionalidade

Este código é um exemplo de como um projeto de IoT pode coletar dados ambientais e monitorar condições meteorológicas. Ele é útil para aplicações que precisam de dados em tempo real, como estações meteorológicas ou sistemas de automação residencial. Os dados são armazenados na nuvem (Firebase), permitindo acesso remoto e análise posterior.
